{"version":3,"file":"static/js/290.6d290ed6.chunk.js","mappings":"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","sources":["pages/MovieDetailsPage/MovieDetailsPage.jsx","services/movies-api.js"],"sourcesContent":["import { Suspense, useEffect, useState } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { loadFullInfoMovie } from 'services/movies-api';\nimport { Sections, Title } from 'pages/HomePage/HomePage.styled';\nimport {\n  AdditionalWrapper,\n  BtnInfoWrapper,\n  BtnText,\n  ButtonLink,\n  DetailsWrapper,\n  Img,\n  InfoWrapper,\n  MovieWrapper,\n  SectionWrapper,\n  TitleDetails,\n} from './MovieDetailsPage.styled';\n\nconst BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState({});\n  const location = useLocation();\n  const backLink = location?.state?.from ?? '/';\n\n  useEffect(() => {\n    loadFullInfoMovie(movieId).then(setMovieInfo);\n  }, [movieId]);\n\n  if (Object.keys(movieInfo).length === 0) {\n    return null;\n  }\n\n  const { vote_average, title, overview, genres, poster_path, release_date } =\n    movieInfo;\n  const posterLink = BASE_URL + poster_path;\n  const userScore = parseInt(vote_average * 10);\n  const genresInfo = genres.map(el => el.name).join(', ');\n  const releaseYear = release_date.split('-')[0];\n\n  return (\n    <InfoWrapper>\n      <Sections>\n        <SectionWrapper>\n          <ButtonLink to={backLink}>Go Back</ButtonLink>\n          <MovieWrapper>\n            <Img src={posterLink} alt={`${title} poster`} />\n            <AdditionalWrapper>\n              <DetailsWrapper>\n                <TitleDetails>\n                  {title} ({releaseYear})\n                </TitleDetails>\n                <p>User Score: {userScore}%</p>\n                <h3>Overview</h3>\n                <p>{overview}</p>\n                <h3>Genres</h3>\n                <p>{genresInfo}</p>\n              </DetailsWrapper>\n              <DetailsWrapper>\n                <Title>Additional information</Title>\n                <BtnInfoWrapper>\n                  <li>\n                    <ButtonLink to=\"cast\" state={location.state}>\n                      <BtnText>Cast</BtnText>\n                    </ButtonLink>\n                  </li>\n                  <li>\n                    <ButtonLink to=\"reviews\" state={location.state}>\n                      <BtnText>Reviews</BtnText>\n                    </ButtonLink>\n                  </li>\n                </BtnInfoWrapper>\n              </DetailsWrapper>\n            </AdditionalWrapper>\n          </MovieWrapper>\n        </SectionWrapper>\n      </Sections>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </InfoWrapper>\n  );\n};\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst API_KEY = 'd28587289cbb1fa464f22095b510f01a';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const loadTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  const trendingMovies = response.data.results.map(movie => {\n    const { id, title, poster_path } = movie;\n    return {\n      id,\n      title,\n      poster_path,\n    };\n  });\n  return trendingMovies;\n};\n\nexport const loadFullInfoMovie = async id => {\n  const response = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n\n  const { vote_average, title, overview, genres, poster_path, release_date } =\n    response.data;\n\n  return {\n    vote_average,\n    title,\n    overview,\n    genres,\n    poster_path,\n    release_date,\n  };\n};\n\nexport const loadCastInfoMovie = async id => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  const castInfo = response.data.cast.map(el => {\n    const { name, character, profile_path, id } = el;\n    return {\n      name,\n      character,\n      profile_path,\n      id,\n    };\n  });\n\n  return castInfo;\n};\n\nexport const loadReviewsMovie = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const reviews = response.data.results.map(el => {\n    const { id, author, content, author_details } = el;\n    return {\n      id,\n      author,\n      content,\n      author_details,\n    };\n  });\n\n  return reviews;\n};\n\nexport const loadMovieOnSearch = searchQuery => {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${searchQuery}`\n  )\n    .then(response => response.json())\n    .then(data => {\n      const movieList = data.results.map(el => {\n        const { id, title, poster_path } = el;\n        return {\n          id,\n          title,\n          poster_path,\n        };\n      });\n\n      return movieList;\n    });\n};\n"],"names":["movieId","useParams","useState","movieInfo","setMovieInfo","location","useLocation","backLink","state","from","useEffect","loadFullInfoMovie","then","Object","keys","length","vote_average","title","overview","genres","poster_path","release_date","posterLink","userScore","parseInt","genresInfo","map","el","name","join","releaseYear","split","to","src","alt","Suspense","fallback","API_KEY","axios","loadTrendingMovies","response","trendingMovies","data","results","movie","id","loadCastInfoMovie","castInfo","cast","character","profile_path","loadReviewsMovie","reviews","author","content","author_details","loadMovieOnSearch","searchQuery","fetch","json"],"sourceRoot":""}