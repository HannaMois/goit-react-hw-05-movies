{"version":3,"file":"static/js/94.3029b7c9.chunk.js","mappings":"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","sources":["pages/ReviewsPage/ReviewsPage.styled.jsx","pages/ReviewsPage/ReviewsPage.jsx","services/movies-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewList = styled.ul`\n  padding: 0 15px;\n  margin: 0;\n`;\n\nexport const ReviewListItem = styled.li`\n  background-color: #f1dddd;\n  margin-bottom: 26px;\n  padding: 15px 15px;\n`;\n\nexport const AuthorWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n`;\n\nexport const AuthorImg = styled.img`\n  display: block;\n  width: 32px;\n  height: 32px;\n  object-fit: cover;\n  padding: 2px;\n`;\n\nexport const ReviewContent = styled.p`\n  font-weight: normal;\n  font-size: 13px;\n  line-height: 17px;\n  color: #042936;\n  margin-left: 8px;\n`;\n\nexport const AuthorName = styled.p`\n  color: #042936;\n  font-size: 13px;\n  font-weight: bold;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { loadReviewsMovie } from 'services/movies-api';\nimport { Sections, Title } from 'pages/HomePage/HomePage.styled';\nimport {\n  AuthorImg,\n  AuthorName,\n  AuthorWrapper,\n  ReviewContent,\n  ReviewList,\n  ReviewListItem,\n} from './ReviewsPage.styled';\nimport image from '../../images/image2.jpg';\n\nconst BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    loadReviewsMovie(movieId).then(setReviews);\n  }, [movieId]);\n\n  const ReviewsNull = reviews.length === 0;\n\n  const AvatarAuthor = avatar => {\n    if (avatar === null) {\n      return `${image}`;\n    }\n    if (avatar.includes('http') === true) {\n      return `${avatar.slice(1)}`;\n    }\n    return `${BASE_URL}${avatar}`;\n  };\n\n  return ReviewsNull ? (\n    <Sections>\n      <Title>We don't have any reviews for this movie</Title>\n    </Sections>\n  ) : (\n    <Sections>\n      <ReviewList>\n        {reviews.map(review => {\n          const { id, content, author } = review;\n          const avatar = review.author_details.avatar_path;\n\n          return (\n            <ReviewListItem key={id}>\n              <AuthorWrapper>\n                <AuthorImg src={AvatarAuthor(avatar)} alt={author} />\n                <AuthorName>{author}</AuthorName>\n              </AuthorWrapper>\n\n              <ReviewContent>{content}</ReviewContent>\n            </ReviewListItem>\n          );\n        })}\n      </ReviewList>\n    </Sections>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'd28587289cbb1fa464f22095b510f01a';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const loadTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  const trendingMovies = response.data.results.map(movie => {\n    const { id, title, poster_path } = movie;\n    return {\n      id,\n      title,\n      poster_path,\n    };\n  });\n  return trendingMovies;\n};\n\nexport const loadFullInfoMovie = async id => {\n  const response = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n\n  const { vote_average, title, overview, genres, poster_path, release_date } =\n    response.data;\n\n  return {\n    vote_average,\n    title,\n    overview,\n    genres,\n    poster_path,\n    release_date,\n  };\n};\n\nexport const loadCastInfoMovie = async id => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  const castInfo = response.data.cast.map(el => {\n    const { name, character, profile_path, id } = el;\n    return {\n      name,\n      character,\n      profile_path,\n      id,\n    };\n  });\n\n  return castInfo;\n};\n\nexport const loadReviewsMovie = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const reviews = response.data.results.map(el => {\n    const { id, author, content, author_details } = el;\n    return {\n      id,\n      author,\n      content,\n      author_details,\n    };\n  });\n\n  return reviews;\n};\n\nexport const loadMovieOnSearch = searchQuery => {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${searchQuery}`\n  )\n    .then(response => response.json())\n    .then(data => {\n      const movieList = data.results.map(el => {\n        const { id, title, poster_path } = el;\n        return {\n          id,\n          title,\n          poster_path,\n        };\n      });\n\n      return movieList;\n    });\n};\n"],"names":["ReviewList","styled","ReviewListItem","AuthorWrapper","AuthorImg","ReviewContent","AuthorName","movieId","useParams","useState","reviews","setReviews","useEffect","loadReviewsMovie","then","ReviewsNull","length","AvatarAuthor","avatar","image","includes","slice","map","review","id","content","author","author_details","avatar_path","src","alt","API_KEY","axios","loadTrendingMovies","response","trendingMovies","data","results","movie","title","poster_path","loadFullInfoMovie","vote_average","overview","genres","release_date","loadCastInfoMovie","castInfo","cast","el","name","character","profile_path","loadMovieOnSearch","searchQuery","fetch","json"],"sourceRoot":""}